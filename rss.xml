<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title></title>
        <link>/</link>
        <description></description>
        <lastBuildDate>Fri, 08 Sep 2023 14:03:49 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/webmasterish/vuepress-plugin-feed</generator>
        <item>
            <title><![CDATA[Non-deterministic errors, replayers and shadowers]]></title>
            <link>/blog/2023/08/27/nondeterministic-errors-replayers-shadowers/</link>
            <guid>/blog/2023/08/27/nondeterministic-errors-replayers-shadowers/</guid>
            <pubDate>Sun, 27 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[It is conceivable that developers constantly update their Cadence workflow code based upon new business use cases and needs. However,
the definition of a Cadence workflow must be deterministic because behind the scenes cadence uses event sourcing to construct
the workflow state by replaying the historical events stored for this specific workflow. Introducing components that are not compatible
with an existing running workflow will yield to non-deterministic errors and sometimes developers find it tricky to debug. Consider the
following workflow that executes two activities.

func SampleWorkflow(ctx workflow.Context, data string) (string, error) {
    ao := workflow.ActivityOptions{
        ScheduleToStartTimeout: time.Minute,
        StartToCloseTimeout:    time.Minute,
    }
    ctx = workflow.WithActivityOptions(ctx, ao)
    var result1 string
    err := workflow.ExecuteActivity(ctx, ActivityA, data).Get(ctx, &result1)
    if err != nil {
        return "", err
    }
    v ...]]></description>
        </item>
        <item>
            <title><![CDATA[Cadence Community Spotlight Update - July 2023]]></title>
            <link>/blog/2023/07/31/community-spotlight-july-2023/</link>
            <guid>/blog/2023/07/31/community-spotlight-july-2023/</guid>
            <pubDate>Mon, 31 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to the latest of our regular monthly Community Spotlight updates that gives you news from in and around the Cadence community!

Please see below for a roundup of the highlights:

Getting Started with Cadence

Are you new to  Cadence and want to understand the basic concepts and architecture? Well we have some great information for you!

Community member Chris Qin has written a short blog post that takes you through the the three main components that make up a Cadence application. Please take a look and feel free to give us your comments and feedback.

Thanks Chris for sharing your knowledge and helping others to get started.

Cadence Go Client v1.0 Released

This month saw the release of v1.0 of the Cadence Go Client. Note that the work done on this release was as a result ...]]></description>
        </item>
        <item>
            <title><![CDATA[Write your first workflow with Cadence]]></title>
            <link>/blog/2023/07/16/write-your-first-workflow-with-cadence/</link>
            <guid>/blog/2023/07/16/write-your-first-workflow-with-cadence/</guid>
            <pubDate>Sun, 16 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We have covered basic components of Cadence and how to implement a Cadence worker on local environment in previous blogs. In this blog, let's write your very first HelloWorld workflow with Cadence. I've started the Cadence backend server in background and registered a domain named test-domain. You may use the code snippet for the worker service in this blog  Let's first write a activity, which takes a single string argument and print a log in the console.

func helloWorldActivity(ctx context.Context, name string) (string, error) {
	logger := activity.GetLogger(ctx)
	logger.Info("helloworld activity started")
	return "Hello " + name + "!", nil
}

Then let's write a workflow that invokes this activity
func helloWorldWorkflow(ctx workflow.Context, name string) error {
	ao := workflow.ActivityOptions{
 ...]]></description>
            <enclosure url="/../../shared/img/cadence_ui.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[Bad practices and Anti-patterns with Cadence (Part 1)]]></title>
            <link>/blog/2023/07/10/cadence-bad-practices-part-1/</link>
            <guid>/blog/2023/07/10/cadence-bad-practices-part-1/</guid>
            <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In the upcoming blog series, we will delve into a discussion about common bad practices and anti-patterns related to Cadence. As diverse teams often encounter distinct business use cases, it becomes imperative to address the most frequently reported issues in Cadence workflows. To provide valuable insights and guidance, the Cadence team has meticulously compiled these common challenges based on customer feedback.

Reusing the same workflow ID for very active/continuous running workflows

Cadence organizes workflows based on their unique IDs, using a process called partitioning. If a workflow receives a large number of updates in a short period of time or frequently starts new runs using the continueAsNew function, all these updates will be directed to the same shard. Unfortunately, the Cadence backend is not equipped to handle this concentrated workload efficiently. As a result, a situation known as a "hot shard" arises, overloading the Cadence backend and worsening the prob ...]]></description>
        </item>
        <item>
            <title><![CDATA[Implement a Cadence worker service from scratch]]></title>
            <link>/blog/2023/07/05/implement-cadence-worker-from-scratch/</link>
            <guid>/blog/2023/07/05/implement-cadence-worker-from-scratch/</guid>
            <pubDate>Wed, 05 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In the previous blog, we have introduced three critical components for a Cadence application: the Cadence backend, domain, and worker. Among these, the worker service is the most crucial focus for developers as it hosts the activities and workflows of a Cadence application. In this blog, I will provide a short tutorial on how to implement a simple worker service from scratch in Go.

To finish this tutorial, there are two prerequisites you need to finish first
Register a Cadence domain for your worker. For this tutorial, I've already registered a domain named test-domain
Start the Cadence backend server in background.

To get started, let's simply use the native HTTP package built in Go to start a process listening to port 3000. You may customize the port for your worker, but the port you choose should not conflict with existing port for your Cadence backend.

package main

import (
	"fmt"
	"net/http"
)

func main( ...]]></description>
        </item>
    </channel>
</rss>